(set-option :produce-models true)
(declare-const e Int)
(declare-const a Int)
(declare-const b Int)
(declare-fun f (Int Int) Int)
(declare-fun h (Int) Int)
(assert (and 
(= (f (f e e) e) (f e (f e e)))
(= (f (f e e) a) (f e (f e a)))
(= (f (f e e) b) (f e (f e b)))
(= (f (f e a) e) (f e (f a e)))
(= (f (f e a) a) (f e (f a a)))
(= (f (f e a) b) (f e (f a b)))
(= (f (f e b) e) (f e (f b e)))
(= (f (f e b) a) (f e (f b a)))
(= (f (f e b) b) (f e (f b b)))
(= (f (f a e) e) (f a (f e e)))
(= (f (f a e) a) (f a (f e a)))
(= (f (f a e) b) (f a (f e b)))
(= (f (f a a) e) (f a (f a e)))
(= (f (f a a) a) (f a (f a a)))
(= (f (f a a) b) (f a (f a b)))
(= (f (f a b) e) (f a (f b e)))
(= (f (f a b) a) (f a (f b a)))
(= (f (f a b) b) (f a (f b b)))
(= (f (f b e) e) (f b (f e e)))
(= (f (f b e) a) (f b (f e a)))
(= (f (f b e) b) (f b (f e b)))
(= (f (f b a) e) (f b (f a e)))
(= (f (f b a) a) (f b (f a a)))
(= (f (f b a) b) (f b (f a b)))
(= (f (f b b) e) (f b (f b e)))
(= (f (f b b) a) (f b (f b a)))
(= (f (f b b) b) (f b (f b b)))
(= (f b (f a (h a))) (f (f b a) (h a)))

(= (f e e) e)
(= (f a e) a) (= (f e a) a)
(= (f b e) b) (= (f e b) b)
(= (f (h a) e) (h a)) (= (f e (h a)) (h a))
(= (f (h b) e) (h b)) (= (f e (h b)) (h b))
(= (f (h e) e) (h e)) (= (f e (h e)) (h e))

(= (f e (h e)) e) (= (f (h e) e) e)
(= (f a (h a)) e) (= (f (h a) a) e)
(= (f b (h b)) e) (= (f (h b) b) e)
(= (f (h e) (h (h e))) e) (= (f (h (h e)) (h e)) e)
(= (f (h a) (h (h a))) e) (= (f (h (h a)) (h a)) e)
(= (f (h b) (h (h b))) e) (= (f (h (h b)) (h b)) e)

(= (f a b) e) (= (f b a) e)  (not (= b (h a)))

))
(check-sat)
(get-model)